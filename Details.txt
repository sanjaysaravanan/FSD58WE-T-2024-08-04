1. Advanced:

    Optimization Techniques to Improve the performance

      lazy and suspense

        lazy - used to load the js file only when needed
        suspense - used to calculate which file is needed & which is not

      memo:
        avoids the re-rendering of the same component if the component's props are not changed

        Rendering for a component with Memo will happend only when it is new or props are changed

      useCallback:
        to avoid un-necessary re-renders/rendering

      useMemo:
        https://react.dev/reference/react/useMemo
    
Database:
  A database is an organized collection of structured/unstructured information, or data, 
  typically stored electronically in a computer system. A database is usually 
  controlled by a database management system (DBMS).

  SQL --> Structured Query Language
    Language used to structurallly design the database, & query the database which responds with data
  
  DBMS:
    Database Management System is a software application/service used to 
    manage the operations( CRUD ) in the DB.

  MySql: (DBMS)
    MySQL is a Structural database management system.

  MySql Engine:
    A storage engine is a software module that a database management system uses to do create, read, update data in a database.

DB Designing:
  Table (group of similar data):
    represents the collections of single object
      eg:
        books is table which will contain multiple books:

        isbn Name          Author     PublisheDate  Likes
        1    Harry Potter   JK          2023         1000
        2    Wings Of Fire  APJ         2021         699

        todos 

        id title         isCompleted      DueDate
        1  Dance         false            2023-11-28
        2  Learn Python  false            2024-11-11
  
  Design a DB for Facebook sort of application,

    Classify the data/entities or objects in the database

    Data invovled in facebook, 
      what are the groups of data that is being used in Facebook,
        1. Users ---> id, Profile Picture, Name, DOB, BIO, email
        2. Friends ---> Req_id, User_Id, email, accepted, friend_since, friend_id ( other user_id)
        3. Posts ---> post_id, user_id, vidoe/image, likes (number)
        4. Comments ---> user_id, datetime, string, post_id, comment_id
        5. Ads --> name, image, link, genre of the ads
    
    Chat Application:
      1. Users -> user_id, name, profile_pic, phone_number
      2. contacts -> name, profile_pic, phone_number
      3. chats -> chat_id, description, datetime, sender, receiver, sender_time, receiver_time

  Structuring of Data --> Design the Relationship between objects or entities.

    1. Primary Key ( unique attibute for every single object of a particular group )
      id in the above books table
    
    2. Foreign Key ( primary key of an object in another table )


  Relational DB:

    Data / Objects are related together.

  Entity Relationship between tables/objects,
    one-to-one ( one student ---> one course )
    one-to-many (course ---> students, post ---> comments)
    many-to-one (comments ---> post)
    many-to-many ( Orders <--> Products )

    Entity Relationship Diagram

    Entity relationship diagram desinging should be practice with pen/paper 
    Once finlaized go for any online tool

    https://www.lucidchart.com/pages/er-diagrams
  
  basic Data Types:

    datatypes in sql
      basic types 
        varchar(size) - string, 
        INT(size), 
        FLOAT(size, d),
        Bool,
        DATE,
        text - string,
        BLOB(size) / TEXT (CDN URL)- images/vidoes
          Blob is usually not suggested to used because of the uncertain size and type of the media which can load the DB size.
          Preferred way is CDN ( Content Delivery Network ) which can serve the images or videos over internet
    
      several more refer - https://www.w3schools.com/sql/sql_datatypes.asp

  
  Prime Video Objects:

    Movie --> name, storyline, genre, year, directors, producers, stars

    Stars: Primary Key id
      id    name      gender   noOfMovies
      1     SRK       Male      100
      2     Ranveer   Male      30
      3     Deepika   Female    100
      4     Vijay     Male      50

    genres table primary key id
      id, name,              description
      1   suspense           Sudden Twist in the plot
      2   Drama              Melodramatic in the plot
      3.  Horror             Horror
      4.  Romance            Love Film
    
    Directors: primary key id

      id   name   noOfMovies
      1    Atlee  5
      2    Lokesh 5
      3    Nelson 4

    Movies: primary key id, foreign_key driector_id, 

      id    name    driector_id lead_hero story_line  cast_id
      1     Jawan     1           1         asdfas      1      
      2     Leo       2           4         sdfasdf
      3     Jailer    3           6         asdfasdf
    
    Crews:

      id  movie_id  Role          crew_id
      1   1         Director

    Casting: ( Linking Table for Movie & Stars )
      id ( Primary key)
      movie_id ( Foreign_key --> primary key of some other table )
      star_id

      id    movie-id    star-id
      1       1          1
      2       1          3
    
    Movie-Genres ( Linking table or the relating table )
      id movie-id genre-id
      1    1        1
      2    1        2
      3    1        4 

  Eg:
    School/College maintaining students/teachers data in structured manner 
    like below,
      Student:
        student_id ( int ) - Primary key
        student_name (  )
        student_class/year
        student_department
        class_teacher ( Teacher Id - Foreign_key)
      Teacher:
        teacher_id ( Primary key )
        teacher_name
        teacher_subject
      Subjects:
        name
        id (primary key)
        teacher ( teacher_id ) ( FOREIGN KEY )
      Marks:
        subject_id ( FOREIGN KEY )
        mark
        mark_id (primary key)
        student_id ( FOREIGN KEY )
        teacher_id ( FOREIGN KEY )

      Relationship between the teacher and student,
        teacher ---> students (one to many)
      
      Subject & Teacher,
        teacher ---> subject
        one - to - one
      
      Marks and Subjects:
        Marks --> subjects, students (many to many)

        Linking Table - Evaluation as Table 

        Refer: https://d2slcw3kip6qmk.cloudfront.net/marketing/pages/chart/seo/ERD/discovery/erd-school.svg

    Train Ticket Booking,
      Train:
        train_number
        train_name
        train_status
      Customers:
        cust_id
        cust_name
        cust_email
        cust_phone
      Bookings: (Tickets)
        pnr
        customer_id (foreign_key)
        seat
        train_number (foreign_key)
        date
  
  Exercise:
   Design a DB for Shopping Mart including,
    Customers, Products, Orders related Cart_id/customer_id (), Cart ( multiple entries of product with same cart_id )

SQLBOLT: ( https://sqlbolt.com/ )
  Website to learn SQL with exercises

create DB: One Application - One Database
  https://www.w3schools.com/sql/default.asp


SQL Query Shell or Script:
  syntax: CREATE DATABASE databasename;

  Eg: Create Data-base for School Management

  CREATE DATABASE school-mgmt;

list DB;

use DBName; // Will be useing the specific DB for storing the data

create table

  rows(inserted, updated, deleted) ( data ), 
  
  columns(alter) ( specification of the type of data )

  https://www.w3schools.com/sql/sql_create_table.asp

  CREATE TABLE table_name (
      column1 datatype,
      column2 datatype,
      column3 datatype,
    ....
  );

  CREATE TABLE Students (
    StudentId int PRIMARY KEY,
    LastName varchar(255),
    FirstName varchar(255),
    Class int,
  );

ALTER TABLE:
  statement is used to add, delete, or modify columns in an existing table.
  ALTER TABLE table_name
  ADD column_name datatype;

  ALTER TABLE table_name
  DROP COLUMN column_name;

  ALTER TABLE table_name
  RENAME COLUMN old_name to new_name;

  ALTER TABLE table_name
  MODIFY COLUMN column_name datatype;

DROP:

  DROP TABLE IF EXISTS table_name;

CRUD --> READ, CREATE, UPDATE, DELETE

READ:
  select:
    all data
      SELECT * FROM movies;

    single column
      SELECT title FROM movies;

    multiple columns
      SELECT title, director FROM movies;

  Filtering:
    where:
      select movies from year 1995
      select movies except with ids 1, 5, 8
      select the movies which contains WALL in titl string

  Sorting:
    order by:
      select * from movies order by Title asc/desc;
    limit:
      order and limit the enteries
    offset:
      where to start the limit count

  distinct:
    without duplicate
    list all directors in alphbetical

Task:

  2024-08-04:
    Complete lessons 1, 2, 3, 4, 16, 17, 18

    Do Not Submit Till 2024-8-10: Because You need to suibmit all the questions ( Screenshot for all the questions )

    So, complete what we discussed and keep it ready, once we disccuss all
      You can complete all the submit the screenshots in Github
      Eg Link: https://github.com/sanjaysaravanan/task-sqlbolt

Extra Task: No Submission Needed:
  1. Design a DB for Shopping Mart including,
    Customers, Products, Orders related Cart_id/customer_id (), Cart ( multiple entries of product with same cart_id )
  2. Design DB ToDo Application
  3. Design DB for Alarm Clock Application

Next Session:

  aggregate function:
    max, sum, min, count

  alias:
    as syntax to convert the column name

  group by:
    aggregate function by combing row with condition
    Reference: https://sqlbolt.com/lesson/select_queries_with_aggregates


  CREATE:
    insert:
      INSERT INTO tablename
      (column, another_column, …)
      VALUES (value_or_expr, another_value_or_expr, …),
            (value_or_expr_2, another_value_or_expr_2, …),
            …;

  UPDATE:
    UPDATE mytable
    SET column = value_or_expr, 
        other_column = another_value_or_expr, 
        …
    WHERE condition;

    change director for a movie

    update movies set Director='John Lasseter' where Title="A Bug's Life";

  DELETE:
    DELETE FROM mytable
    WHERE condition;

  Degin a DB for IMDB

  Desing the DB Tables and Realtionships like belwo,

  Movies (
    id INT,
    title TEXT,
    ...
  );
  Genre (
    id INT,
    movie_id INT,
    ...
  );

  Movie --> Many Genres

  Storing image or video:
    blob --> 
      https://stackoverflow.com/questions/6472233/can-i-store-images-in-mysql
    BLOB(size) / TEXT (CDN URL)- images/vidoes